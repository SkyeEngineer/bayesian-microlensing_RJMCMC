'''
plt.scatter(states_2[:,5], states_2[:,4], c=np.linspace(0.0, 1.0, len(states_2)), cmap='spring', alpha=0.25, marker="o")
cbar = plt.colorbar(fraction = 0.046, pad = 0.04, ticks=[0, 1]) # empirical nice auto sizing
#cbar.set_label('Time', rotation = 90, fontsize=10)
ax=plt.gca()
cbar.ax.set_yticklabels(['Initial\nStep', 'Final\nStep'], fontsize=9)
cbar.ax.yaxis.set_label_position('right')
#plt.scatter(h_states_2[:,5], h_states_2[:,4], c='black', alpha=0.5, marker=".", label='Jump', s=0.5)
plt.xlabel(r'Separation [$E_r$]')
plt.ylabel('Mass Ratio')
plt.title('RJMCMC walk\nprojected onto Binary (s, q) space')
plt.scatter(center_2[5], np.exp(center_2[4]), marker=r'$\odot$', label='Centre', s=markerSize, c='black', alpha=1)
plt.scatter(theta_Model[5], theta_Model[4], marker='*', label='True', s=markerSize, c='black', alpha=1)#r'$\circledast$'
plt.legend()
plt.grid()
plt.ticklabel_format(axis="y", style="sci", scilimits=(0,0))
plt.tight_layout()
plt.savefig('Plots/RJ-binary-Walk.png')
plt.clf()
'''


'''
plt.scatter(h_ind, h_states_2[:,4], alpha=0.25, marker="*", label='Jump from M1')
#plt.hlines(0.0009, 0, len(states_2), label='True', color='red')
plt.plot(np.linspace(1, len(states_2), len(states_2)), states_2[:,4], linewidth=0.5)
plt.xlabel('Binary Steps')
plt.ylabel('Mass Ratio')
plt.title('RJMCMC Binary model q Trace')
#plt.hlines(np.exp(center_2[4]), 0, len(states_2), label='Centre', color='black')
#r'$\circledast$'

plt.grid()
plt.ticklabel_format(axis="y", style="sci", scilimits=(0,0))

#plt.axhline(0.0009, label='True', color='red')
plt.axhline(theta_Model[4], label='True', color='red')
plt.axhline(np.exp(center_2[4]), label='Centre', color='black')
plt.legend()

plt.tight_layout()
plt.savefig('Plots/RJ-q-binary-Walk.png')
plt.clf()
'''



'''
plt.hist(states_2[:,4], bins=50, density=True)
#h=plt.gca().get_ylim()[1]

#plt.vlines(np.exp(center_2[4]), 0, h, label='Centre', color='black')
plt.xlabel('Mass Ratio')
plt.ylabel('Probability Density')
plt.title('RJMCMC Binary model q\ndistribution')

plt.grid()
plt.ticklabel_format(axis="y", style="sci", scilimits=(0,0))
plt.ticklabel_format(axis="x", style="sci", scilimits=(0,0))

#plt.axvline(0.0009, label='True', color='red')
plt.axvline(theta_Model[4], label='True', color='red')
plt.axvline(np.exp(center_2[4]), label='Centre', color='black')
#col = LineCollection([((0.0009, -h), (0.0009, 2*h))])
#ax.add_collection(col, autolim=False)


plt.legend()
plt.tight_layout()
plt.savefig('Plots/RJ-Binary-q-dist')
plt.clf()
'''


'''
plt.scatter((states_1[:,2]), (states_1[:,1]), c=np.linspace(0.0, 1.0, len(states_1)), cmap='spring', alpha=0.25, marker="o")
cbar = plt.colorbar(fraction = 0.046, pad = 0.04) # empirical nice auto sizing
cbar.set_label('Time', rotation = 90)
plt.scatter(h_states_1[:,2], h_states_1[:,1], c='black', alpha=0.1, marker=".", label='Jump from M2', s=1)
plt.xlabel('u0 [?]')
plt.ylabel('tE [?]')
plt.title('RJ single model walk through minimum impact parameter / Einstein crossing time \nwith centreing function')
plt.scatter(center_1[2], center_1[1], marker=r'$\odot$', label='Centre', s=markerSize, c='black', alpha=1)
#plt.scatter(61.5, 0.133, marker='*', label='True', s=markerSize, c='black', alpha=1)#r'$\circledast$'
plt.legend()
plt.savefig('Plots/RJ-single-Walk.png')
plt.clf()
'''


'''

MeanModel_2.set_magnification_methods([0., 'VBBL', 72.])
Model.plot_magnification(t_range=[0, 72], subtract_2450000=False, color='black')
MeanModel_2.plot_magnification(t_range=[0, 72], subtract_2450000=False, color='red')
plt.title(np.exp(f.logLikelihood(2, Data, meanState_2, priors)))
plt.savefig('Plots/BinaryFit.png')
plt.clf()
'''


'''
MeanModel_1.set_magnification_methods([0., 'point_source', 72.])
Model.plot_magnification(t_range=[0, 72], subtract_2450000=False, color='black')
MeanModel_1.plot_magnification(t_range=[0, 72], subtract_2450000=False, color='red')
plt.title(np.exp(f.logLikelihood(1, Data, meanState_1, priors)))
plt.savefig('Plots/SingleFit.png')
plt.clf()
'''